class VADE
{
	private $host = none;
	private $port = none;
	private $timeout = none;
	private $tls = none;
	private $msgsize = none;

	constructor($host, $opts = [])
	{
		$this->host = $host;
		$this->port = $opts["port"] ?? 8080;
		$this->timeout = $opts["timeout"] ?? 10;
		$this->tls = $opts["tls"] ?? ["enabled" => false];
		$this->msgsize = number($opts["max_message_size"] ?? (5 * 1024 * 1024));
	}

	function ping()
	{
		$protocol = $this->tls["enabled"] ? "https://" : "http://";
		$result = http($protocol.$this->host.":".$this->port."/api/v1/info/ping");
		if (!is_string($result))
			return ["error" => "Unable to parse result"];
		return json_decode($result)["ping"];
	}

	function scan($fp)
	{
		global $senderip;
		global $senderhelo;
		global $sender;
		global $recipients;

		$conn = $socket = Socket(Socket::AF($this->host), "SOCK_STREAM");
		if (!$socket->settimeout($this->timeout)) return ["error" => "Failed to set timeout"];
		if (!$socket->connect($this->host, $this->port)) return ["error" => "Failed to connect"];

		if ($this->tls["enabled"]) {
			$socket = TLSSocket($socket, $this->tls["opts"] ?? []);
			if (!$socket->handshake()) return ["error" => "Failed TLS"];
		}

		$length = $fp->seek(0, "SEEK_END");
		if ($length > $this->msgsize)
			$length = $this->msgsize;
		$fp->seek(0, "SEEK_SET");

		$headers = [
			"POST /api/v1/scan HTTP/1.0",
			"Host: ".$this->host.":".$this->port,
			"User-Agent: Halon HTTP client (HSL)",
			"Accept: application/json",
			"Content-Length: $length",
			"X-Inet: $senderip",
			"X-Helo: $senderhelo",
			"X-Mailfrom: $sender"
		];

		foreach ($recipients as $rcpt) {
			$headers[] = "X-Rcptto: $rcpt";
		}

		if (!$socket->send(implode("\r\n", $headers)."\r\n\r\n")) return ["error" => "An error occurred when sending data"];

		$b = 0;
		while ($str = $fp->read(($this->msgsize - $b < 8192) ? ($this->msgsize - $b) : 8192)) {
			if (!$socket->send($str)) return ["error" => "An error occurred when sending data"];
			$b += length($str);
			if ($b >= $this->msgsize)
				break;
		}

		$response = "";
		while ($resp = $socket->recv(8192)) {
			$response .= $resp;
		}

		$conn->shutdown("SHUT_RDWR");
		$conn->close();

		[$headers, $content] = explode("\r\n\r\n", $response);
		[$http, $status, $msg] = explode(" ", explode("\r\n", $headers)[0]);

		if (number($status) > 299)
			return ["error" => "Failed to scan mail ($status $msg)"];
		if (!is_string($content))
			return ["error" => "Unable to parse result"];

		return json_decode($content);
	}
}

class PostgreSQL
{
	private $address = none;
	private $port = none;
	private $timeout = none;
	private $socket = none;
	private $user = none;
	private $database = none;
	private $error = none;

	constructor($address, $user, $database, $opts = [])
	{
		$this->address = $address;
		$this->user = $user;
		$this->database = $database;
		$this->port = $opts["port"] ?? 5432;
		$this->timeout = $opts["timeout"] ?? 30;
	}

	function connect()
	{
		$this->socket = Socket(Socket::AF($this->address), "SOCK_STREAM");
		if (!$this->socket->settimeout($this->timeout)) return;
		if (!$this->socket->connect($this->address, $this->port)) return;

		$l = pack("Z*Z*Z*Z*x", "user", $this->user, "database", $this->database);
		$this->socket->send(pack("Na*a*", length($l) + 8, "\x00\x03\x00\x00", $l));

		forever
		{
			[$tag, $data] = $this->recv();
			if ($tag == "R") continue;
			if ($tag == "S") continue;
			if ($tag == "K") continue;
			if ($tag == "Z") return true;
			if ($tag == "E") $this->setError($data);
			return false;
		}
	}

	function disconnect()
	{
		if (!$this->socket)
			return;

		$this->socket->shutdown("SHUT_RDWR");
		$this->socket->close();
	}

	function query($query, $params = [])
	{
		$this->error = none;

		// Parse
		$stmt = "";
		$data = pack("Z*Z*n", $stmt, $query, length($params));
		foreach ($params as $p) {
			if (is_string($p))
				$data .= pack("N", 25);
			else if (is_number($p))
				$data .= pack("N", 701);
			else
				$data .= pack("N", 705);
		}
		$this->socket->send(pack("aNa*", "P", 4 + length($data), $data));

		// Bind
		$portal = "";
		$stmt = "";
		$data = pack("Z*Z*nnn", $portal, $stmt, 1, 0, length($params));
		foreach ($params as $p) $data .= pack("Na*", length($p), $p);
		$data .= pack("nn", 1, 0);
		$this->socket->send(pack("aNa*", "B", 4 + length($data), $data));

		// Describe
		$name = "";
		$this->socket->send(pack("aNaZ*", "D", 4 + 1 + length($name) + 1, "S", $name));

		// Execute
		$portal = "";
		$this->socket->send(pack("aNZ*N", "E", 4 + length($portal) + 1 + 4, $portal, 0));

		// Sync
		$this->socket->send(pack("aN", "S", 4));

		return $this->getQueryResponse();
	}

	function execute($statement)
	{
		$this->error = none;

		$this->socket->send(pack("aNZ*", "Q", 4 + length($statement) + 1, $statement));

		return $this->getQueryResponse();
	}

	function getLastError()
	{
		return $this->error ?? none;
	}

	private function getQueryResponse()
	{
		$rows = [];
		$fields = [];
		forever
		{
			[$tag, $data] = $this->recv();

			if ($tag == "T")
			{
				[$numfields] = unpack("n", $data, 0);
				$o = 2;
				while ($numfields > 0)
				{
					[$col] = unpack("Z*", $data, $o);
					$o += length($col) + 1;
					$fields[] = $col;

					/*
					$tableoid = $data[$o:$o+=4];
					$colno = $data[$o:$o+=2];
					$typeoid = $data[$o:$o+=4];
					$typelen = $data[$o:$o+=2];
					$typmod = $data[$o:$o+=4];
					$format = $data[$o:$o+=2];
					*/
					$o += 18;

					$numfields -= 1;
				}
				continue;
			}

			if ($tag == "D")
			{
				[$numfields] = unpack("n", $data, 0);
				$o = 2;
				$f = 0;
				$row = [];
				while ($f < $numfields)
				{
					[$o2] = unpack("N", $data, $o);
					$o += 4;
					if ($o2 == 0xffffffff)
						$d = none;
					else {
						$d = $data[$o:$o + $o2];
						$o += $o2;
					}

					$row[$fields[$f]] = $d;

					$f += 1;
				}
				$rows[] = $row;
				continue;
			}

			if ($tag == "1") continue;
			if ($tag == "2") continue;
			if ($tag == "t") continue;
			if ($tag == "n") continue;
			if ($tag == "C") continue;
			if ($tag == "E") $this->setError($data);
			if ($tag == "Z") return $rows;

			return;
		}
	}

	private function recv()
	{
		[$tag, $len] = unpack("ZN", $this->socket->recv(5, "MSG_WAITALL"));
		if ($tag == none or $len == none)
			return [];
		if ($len <= 4)
			return [$tag, ""];
		$len -= 4;

		$data = "";
		while ($len > 0)
		{
			$chunk = $this->socket->recv($len > 65535 ? 65535 : $len);
			if ($chunk == none)
				return none;
			$data .= $chunk;
			$len -= length($chunk);
			$chunk = "";
		}

		return [$tag, $data];
	}

	private function setError($data)
	{
		$this->error = [];
		foreach(explode("\x00", $data[0:-2]) as $error)
			$this->error[$error[0]] = $error[1:];
	}
}
